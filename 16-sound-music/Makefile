# Copyright (c) 2015-2020 Damien Ciabrini
# This file is part of ngdevkit
#
# ngdevkit is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# ngdevkit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with ngdevkit.  If not, see <http://www.gnu.org/licenses/>.

all:
	$(MAKE) cart nullbios

include ../Makefile.config

# Override default to 2-VROM game
GAMEROM=fatfury2
MROM=rom/047-m1.m1
SROM=rom/047-s1.s1
PROM1=rom/047-p1.p1
PROM2=rom/047-p2.p2
PROM=$(PROM1) $(PROM2)
VROM1=rom/047-v1.v1
VROM2=rom/047-v2.v2
VROM=$(VROM1) $(VROM2)
VROMTEMPLATE=$(subst 1,X,$(VROM1))
CROM1=rom/047-c1.c1
CROM2=rom/047-c2.c2
CROM3=rom/047-c3.c3
CROM4=rom/047-c4.c4
CROM=$(CROM1) $(CROM2) $(CROM3) $(CROM4)


# --------
# ROM names and common targets

include ../Makefile.common
$(CART): $(PROM) $(CROM) $(SROM) $(VROM) $(MROM) | rom
ELF=rom.elf
HEX=snd_driver.ihx


# --------
# ASSETS PRE-PROCESSING
WAVS=4/laser

# trim and convert input sounds to expected format
samples/4/laser.wav: mp3/laser-gun-72558.mp3 | samples
	mkdir -p $(dir $@) && $(SOX) -V1 $< -c 1 -r 18500 $@ silence 1 0.01 0.1% reverse silence 1 0.05 0.5% reverse trim 0 0.6



# --------
# MAIN ASSET SOURCES

OBJS=main
Z80_OBJS=user_commands

# make the asset list dynamic so that adding files in the source dir triggers a regeneration if needed
# TODO split assets management into a dedicated makefile
MUSICS=$(shell find musics/ -type f -name '*.fur' 2>/dev/null)


# --------
# GENERATED FILES AND ASSETS

# instruments data and compiled music (NSS) data from all musics in this ROM
Z80_INSTR_OBJS=$(MUSICS:musics/%.fur=instruments-%)
Z80_NSS_OBJS=$(MUSICS:musics/%.fur=nss-%)
Z80_SOUND_SRCS=$(Z80_INSTR_OBJS:%=%.s) $(Z80_NSS_OBJS:%=%.s)
Z80_OBJS+=$(Z80_INSTR_OBJS) $(Z80_NSS_OBJS)

# sound map files: list of all sound assets used in this ROM
# the skeletons are generated by soundtool.py and can be customized later
MUSIC_MAP=music-map.yaml
SAMPLE_MAP=sample-map.yaml
SOUND_MAP=$(MUSIC_MAP) $(SAMPLE_MAP)

# sample offsets file, based on all sound assets in this ROM
SAMPLES_INC:=samples.inc

# sound command table and implementation, based on all sound assets in this ROM
COMMANDS_INC=snd_commands.inc

# sound command macros used in the main m68k program
COMMANDS_H=snd_commands.h

GENERATED=$(SAMPLES_INC) $(COMMANDS_INC) $(COMMANDS_H) $(Z80_SOUND_SRCS) samples/.generated

generated: $(SOUND_MAP) $(GENERATED)

clean-generated:
	rm -f $(GENERATED) instruments-*.{s,rel,lst} nss-*.{s,rel,lst} snd_commands_info.h

all: generated
clean: clean-generated


# --------
# TARGETS SPECIFIC TO THIS DEMO ROM

# generate a list of music and soundfx for the m68k main program
snd_commands_info.h: user_commands.rel
	cat user_commands.lst | awk '/cmd_jmptable::/ {table=1; next} table==1 && /cmd_jmptable_padding/ {exit} table==1 && / C3 / {print "\""$$8"\","} END {print "\"\""}' | tr '_' ' ' > $@
main.o: snd_commands_info.h

# wav files from compressed sound assets (.mp3)
$(SAMPLE_MAP): samples/.generated

samples/.generated:
	if [ -n "$(WAVS:%=samples/%.wav)" ]; then $(MAKE) $(WAVS:%=samples/%.wav); fi
	touch $@



# --------
# DEPENDENCIES

user_commands.rel: $(COMMANDS_INC) $(SAMPLES_INC)
main.o: $(COMMANDS_H)



# --------
# TARGETS FOR GENERATED FILES

$(COMMANDS_INC): $(SOUND_MAP)
	$(SOUNDTOOL) -z -s $(SOUND_MAP) -o $@

$(SAMPLES_INC): $(SOUND_MAP)
	$(VROMTOOL) --asm -s $(VROMSIZE) $(SOUND_MAP) -o $(VROMTEMPLATE) -m $@

nss-%.s: musics/%.fur
	$(NSSTOOL) -z $< -n $(call asm_label,$(@)) -o $@

instruments-%.s: musics/%.fur $(SAMPLES_INC)
	$(FURTOOL) $< --instruments -n $(call asm_label,$(@)) -m $(SAMPLES_INC) -o $@

$(SAMPLE_MAP):
	$(SOUNDTOOL) -g samples -o $@

$(MUSIC_MAP):
	$(SOUNDTOOL) -g musics -o $@


FIX_ASSETS=$(ASSETS)/rom/s1-shadow.bin

$(ASSETS)/rom/c1.bin $(ASSETS)/rom/s1.bin:
	$(MAKE) -C $(ASSETS)


# MROM: Build a custom sound driver for the example
# it consists is the nullsound library, plus specific
# functions to trigger the configured actions (play samples)
#
$(HEX): $(Z80_OBJS:%=%.rel)
	$(Z80SDLD) -n -b DATA=0xf800 -m1 -w -i $@ $(NGDKZ80LIBDIR)/nullsound.lib $(Z80_OBJS:%=%.rel)

%.rel: %.s
	$(Z80SDAS) -g -l -p -u -I$(NGDKZ80INCLUDEDIR)/nullsound -o $@ $<


MROMSIZE:=131072
$(MROM): $(HEX) | rom
	$(Z80SDOBJCOPY) -I ihex -O binary $(HEX) $@ --pad-to $(MROMSIZE)


# sample ROM
#
VROMSIZE=2097152
# only target VROM1, vromtool generates both VROM1 and VROM2
$(VROM1): $(SOUND_MAP) | rom
	$(VROMTOOL) --roms -s $(VROMSIZE) $(SOUND_MAP) -o $(VROMTEMPLATE) -n 2
$(VROM2): | rom
	touch $@


# sprite ROM C1 C2: unused, common assets
CROMSIZE:=2097152
$(CROM1): $(ASSETS)/rom/c1.bin | rom
	cp $(ASSETS)/rom/c1.bin	$@ && $(TRUNCATE) -s $(CROMSIZE) $@

$(CROM2): $(ASSETS)/rom/c2.bin | rom
	cp $(ASSETS)/rom/c2.bin	$@ && $(TRUNCATE) -s $(CROMSIZE) $@
$(CROM3) $(CROM4): | rom
	touch $@ && $(TRUNCATE) -s $(CROMSIZE) $@


# fixed tile ROM: fonts from common assets
SROMSIZE:=131072
$(SROM): $(FIX_ASSETS) | rom
	cat $(FIX_ASSETS) > $@ && $(TRUNCATE) -s $(SROMSIZE) $@


# program ROM
$(ELF):	$(OBJS:%=%.o)
	$(M68KGCC) -o $@ $^ `pkg-config --libs ngdevkit`

%.o: %.c
	$(M68KGCC) $(NGCFLAGS) -std=gnu99 -fomit-frame-pointer -g -c $< -o $@

$(COMMANDS_H): $(SOUND_MAP)
	$(SOUNDTOOL) -c -s $(SOUND_MAP) -o $@

PROMSIZE:=1048576
$(PROM1): $(ELF) | rom
	$(M68KOBJCOPY) -O binary -S -R .comment --gap-fill 0xff --pad-to $(PROMSIZE) $< $@ && dd if=$@ of=$@ conv=notrunc,swab
$(PROM2): | rom
	dd if=/dev/zero bs=$(PROMSIZE) count=1 of=$@


clean:
	rm -rf *.gif *.png *.pal *.o *~ $(ELF) *.lst *.sym *.rel *.ihx *.rst tmp.* rom *.def *.map

samples:
	mkdir -p $@

.PHONY: clean
